<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dark的异类之路</title>
    <description>为了学习html+css+javascript而建立这个博客。 联系方式：请看右上角bout me 
</description>
    <link>http://darktan.github.io/</link>
    <atom:link href="http://darktan.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 09 Apr 2015 20:31:37 +0300</pubDate>
    <lastBuildDate>Thu, 09 Apr 2015 20:31:37 +0300</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>4月9号笔记与进度更新</title>
        <description>&lt;h3&gt;&lt;strong&gt;Clojure作业笔记&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;似乎有点突然，这里笔记就转到了这个Clojure，但是没办法，是作业必须完成。为了学分苟活的学渣我也就修修这种课来赚学分了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://iloveponies.github.io/&quot;&gt;这里是资料，你也可以学，只是没学分。&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Clojure是什么玩意：&lt;/strong&gt;&lt;/h4&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Clojure&lt;/strong&gt; is a young Lispish functional programming language on the JVM platform, suitable for small and large programs. Because it runs on the JVM, all Clojure programs can use all the standard and third-party Java libraries freely.&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;user=&amp;gt; (+ 1 2)
3
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是一个标准的Clojure程序代码和输出，它是一种解释性语言。
在这门课的material里推荐使用&lt;a href=&quot;http://lighttable.com/&quot;&gt;light table&lt;/a&gt;作为编译器，大约也是因为可以很好的即时执行Clojure代码的缘故。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;一个Clojure的function实现&lt;/strong&gt;:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;(defn                                ; Start a function definition:
 hello                               ; name
 &quot;Gives out personalized greetings.&quot; ; a optional docstring
 [who]                               ; parameters inside brackets
 (str &quot;Hello, &quot; who &quot;!&quot;))            ; body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;；&lt;/strong&gt;这个符号在clojure里起到注释的作用。
让我们来看看在Java下实现同样的语句效果时的代码是怎么样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
* Gives out personalized greetings.
*/
String hello(String who) {
  return &quot;Hello, &quot; + who + &quot;!&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没错，你可以发现，在Clojure里没有return关键字。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note that in Clojure, there is no return keyword. The return value of a function is always the value of the last expression in the function body.&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;(defn sign [x]
  (if (&amp;lt; x 0)
  &quot;-&quot;
  &quot;+&quot;))

(sign  2) ;=&amp;gt; &quot;+&quot;
(sign -2) ;=&amp;gt; &quot;-&quot;
(sign  0) ;=&amp;gt; &quot;+&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上可以看出来如下说明：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In functional programming, and specifically in Clojure, everything is an expression. This is a way of saying that everything has a usable value.&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;(let [name1 value1
      name2 value2
      ...]
      (expression1)
      (expression2)
      ...)    

user=&amp;gt; (let [x 42]
         (+ x x))
         ;=&amp;gt; 84
user=&amp;gt; x
CompilerException java.lang.RuntimeException:Unable to resolve symbol: x in this context, compiling:(NO_SOURCE_PATH:0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当需要在一个function里声明一个function或者value时，可以使用let关键字。但是此时let声明出的变量或者函数不能在此函数外部使用，说明这是一个local name。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;What kind of values Clojure supports:&lt;/strong&gt;&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type        &lt;/th&gt;
&lt;th&gt; Examples   &lt;/th&gt;
&lt;th&gt; Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Numbers     &lt;/td&gt;
&lt;td&gt; 42, 3/2, 2.1&lt;/td&gt;
&lt;td&gt; Numbers include integers, fractions, and floats.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Strings     &lt;/td&gt;
&lt;td&gt; &quot;foo&quot;       &lt;/td&gt;
&lt;td&gt;Text values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Characters  &lt;/td&gt;
&lt;td&gt; \x, \y, \√    &lt;/td&gt;
&lt;td&gt;A single characer is written with a preceding \.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keywords    &lt;/td&gt;
&lt;td&gt; :foo, :?    &lt;/td&gt;
&lt;td&gt; Values often used as map keys.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Booleans    &lt;/td&gt;
&lt;td&gt; true, false &lt;/td&gt;
&lt;td&gt; Boolean values.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;&lt;br /&gt;
Clojure还支持混合的数据结构：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A &lt;strong&gt;vector&lt;/strong&gt; is a collection that can be indexed with integers, like an array in other languages. It can contain values of different types.&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[1 2 3]                 ;=&amp;gt; [1 2 3]
[:foo 42 &quot;bar&quot; (+ 2 3)] ;=&amp;gt; [:foo 42 &quot;bar&quot; 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;向量需要用符号[]来表示。不仅是空格，也可以用逗号来分割vector里的数据。以下是怎么获取向量里数据的几个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(get [&quot;a&quot; &quot;b&quot; &quot;c&quot;] 1)  ;=&amp;gt; &quot;b&quot;
(get [&quot;a&quot; &quot;b&quot; &quot;c&quot;] 15) ;=&amp;gt; nil
(get [&quot;x&quot;] 0)          ;=&amp;gt; &quot;x&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vectors are immutable即一个已经声明好的向量是不可改变的，但是可以随时利用它来创造新的向量，例如：(conj和assoc是一个函数)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(conj [1 2 3] 4)          ;=&amp;gt; [1 2 3 4]
(assoc [1 2 3 4] 2 &quot;foo&quot;) ;=&amp;gt; [1 2 &quot;foo&quot; 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Vectors: A Postmodern Deconstruction&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;这个我不知道怎么翻译好，似乎是一种提取向量里的值的方法，说是by destructuring，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(let [[x y z] [1 2 3 4 5 6]]
  (str x y z))
;=&amp;gt; &quot;123&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到x,y,z分别抽取出了向量里1，2，3的值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn sum-pairs [[x1 y1] [x2 y2]]
  [(+ x1 x2) (+ y1 y2)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到我们声明了一个函数，这两个向量的第一个值第二个值分别相加，造出了一个新的向量。我认为这就是一种破坏再生的过程，即destructuring的含义所在。后边的练习大概就是关于利用这个特性各种各样拆分向量来计算，答案如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn point [x y]
  [x y])

(defn rectangle [bottom-left top-right]
  [bottom-left top-right])

(defn width [rectangle]
  (let [[[x1 y1] [x2 y2]] rectangle]
    (- x2 x1)))

(defn height [rectangle]
  (let [[[x1 y1] [x2 y2]] rectangle]
    (- y2 y1)))

(defn square? [rectangle]
  (= (width rectangle) (height rectangle)))

(defn area [rectangle]
  (* (width rectangle) (height rectangle)))

(defn contains-point? [rectangle point]
  (let [[[x1 y1] [x2 y2]] rectangle
         [x y] point]
    (and (&amp;lt;= x1 x x2) (&amp;lt;= y1 y y2))))

(defn contains-rectangle? [outer inner]
  (let [[k1 k2] inner]
    (and (contains-point? outer k1) (contains-point? outer k2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 今天就先这样吧，明天继续努力！&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/09/4%E6%9C%889%E5%8F%B7%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6%E6%9B%B4%E6%96%B0.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/09/4%E6%9C%889%E5%8F%B7%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6%E6%9B%B4%E6%96%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>4月8号笔记与进度更新</title>
        <description>&lt;p&gt;昨天的日志里没有和主页统一风格，就只是一个单纯的HTML页面（如下图），一直在想是怎么回事。直到今天又一次看了jekyll的入门教程，发现了我没在文章文件开头写layout的变量格式。感觉一下解决了心病！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-7ce3191d7e689b06.png&quot; alt=&quot;一个普通的HTML页面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有一个问题就是因为昨天看着界面很丑，今天花了大量时间在寻找各种主题。最后却啥也没收获，只是迷乱了双眼，忘却了开启这个博客的本心是为了学习记录，而不是马上就美化它。不过幸好及时醒悟，学习了css basics下两个小节的内容，还有5个小节，每个小节花费的时间是不等的。比如这两个我大约花了2个多小时。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-f5598265d200db29.png&quot; alt=&quot;每个小节都有各自侧重点&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-9f2828e16c986010.png&quot; alt=&quot;小节里的内容例子&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至于笔记，我这个人说实话不太记笔记，以后得改改。因为突然这里感觉已经不是正常的笔记记录了，而是心情经验吐槽记录。最近有点忙，明天不知道能看多少。&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/08/4%E6%9C%888%E5%8F%B7%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6%E6%9B%B4%E6%96%B0.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/08/4%E6%9C%888%E5%8F%B7%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6%E6%9B%B4%E6%96%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>4月7号笔记与进度更新</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-b1a018edd97a75b4.png&quot; alt=&quot;我的小主页&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我的小主页&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本来想着既然要学习前端技术，最好的练习方式当然是马上能上线个网站是最好的了。但是毕竟水平还略差，于是乎折中选择了利用&lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;建立一个小博客(&lt;a href=&quot;http://jekyllcn.com/&quot;&gt;jekyll是个好东西&lt;/a&gt;)来记录自己学习的过程（&lt;a href=&quot;darktan.github.io&quot;&gt;点击这里可以进入我的博客&lt;/a&gt;）。说实话，这玩意还挺不容易，尤其是我的mac在安装jekyll过程中出现了一些问题，花了好几个小时都没解决。最后无奈地看着terminal里出现的大量bug提示信息中某一行说下载一个东西安装就好，试了试还真成功了！(因为之前也看到各种人回答说下载某某东西就好但是下载安装了还是没解决，所以本来对这提示信息不抱希望)&lt;/p&gt;

&lt;p&gt;简而言之，今天还真没什么笔记，今天动手实际弄出来了一个网站，就算是一个很大的进步吧，也算是一个优秀的进度（就是今天没有浪费时间，解决了很多问题，做出了实际东西的意思）。博客里的美化会慢慢好起来的，这需要看看jekyll的文档。&lt;/p&gt;

&lt;p&gt;不过得到的启示就是，不要觉得某件事难就不去做，当真的做起来并解决它的时候，即使花费了不少时间，收获还是很巨大的。&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/07/4%E6%9C%887%E5%8F%B7%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6%E6%9B%B4%E6%96%B0.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/07/4%E6%9C%887%E5%8F%B7%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6%E6%9B%B4%E6%96%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>Html+css+javascript学习计划</title>
        <description>&lt;p&gt;鉴于日前加入了一个python学习小组，本人决定努力学习前端知识，以便成为群里的异类。我的异类之路，无人能挡！
2015年4月6日－4月12日(第一周)：
之前已经在teamtreehouse开始了相对应的课程，选择了前端web开发方向。所以说目前已经有了一些进度，如下图我已经完成第一个how to make a website课(大约有七八个小时的estimation study time)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-dd1b4a70844cad80.png&quot; alt=&quot;美妙实惠的进度表&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这一周的目标就是接着完成下边的css basics课程，不多说。能持续学习下去就好。&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/06/html+css+javascript%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/06/html+css+javascript%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92.html</guid>
        
        
      </item>
    
  </channel>
</rss>
