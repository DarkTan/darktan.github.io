<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dark的异类之路</title>
    <description>为了学习html+css+javascript而建立这个博客。 联系方式：请看右上角bout me 
</description>
    <link>http://darktan.github.io/</link>
    <atom:link href="http://darktan.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 13 Apr 2015 12:40:13 +0300</pubDate>
    <lastBuildDate>Mon, 13 Apr 2015 12:40:13 +0300</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>4月12号学习笔记与进度</title>
        <description>&lt;p&gt;让我们回归这周的CSS任务，争取能学多少是多少。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;Understanding Values and Units&lt;/h2&gt;

&lt;p&gt;Every CSS property has a set of values it can accept. Most properties accept keywords that literally describe a value. Many properties also accept numbers, functions, length values, or a URL.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/tag/CSS%20Data%20Type&quot;&gt;CSS Data Type&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;CSS中length变量的Quick Reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/length&quot;&gt;CSS length units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inamidst.com/stuff/notes/csspx&quot;&gt;CSS px is an Angular Measurement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.webplatform.org/wiki/tutorials/understanding-css-units&quot;&gt;Understanding pixels and other CSS units&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;关于长度变量px的绝对长度部分解释&lt;/h4&gt;

&lt;p&gt;For high-dpi devices, inches (in), centimeters (cm), millimeters (mm) are defined as their physical counterparts. Therefore the px unit is defined relative to them (1/96 of 1 inch).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relative to the viewing device.&lt;/li&gt;
&lt;li&gt;For screen display, typically one device pixel (dot) of the display.&lt;/li&gt;
&lt;li&gt;For printers and very high resolution screens one CSS pixel implies multiple device pixels, so that the number of pixel per inch stays around 96.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Em Units&lt;/h3&gt;

&lt;p&gt;Relative length units are relative to other length values. The most commonly used relative unit is the em unit. The em is known as a font-relative unit because it&#39;s calculated based on a parent element&#39;s font size. (Body default font-size is 16px.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pxtoem.com/&quot;&gt;Tools for PX to EM conversion made simple&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Rem Units&lt;/h3&gt;

&lt;p&gt;The rem unit is similar to the em unit. The difference is that rem is relative only to the root element of the page. This gets us around the compounding font size issue we experience with em units.&lt;/p&gt;

&lt;p&gt;Quick Reference: &lt;a href=&quot;http://snook.ca/archives/html_and_css/font-size-with-rem&quot;&gt;Font sizing with rem&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Color values&lt;/h3&gt;

&lt;p&gt;With CSS, we can describe a color value in different ways. The three most common ways are with a keyword, a hexadecimal value, or an RGB function.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;CSS color values - MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hexadecimal values&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.main-header {
  background-color: #ff0033;/* equals to #f03 */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RGB Values&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a:link {
  color: rgb(255, 169, 73);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RGBa Values(can be transparent)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a:hover {
  rgba(255, 169, 73, .4)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Text Styles&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/text-align&quot;&gt;text-align&lt;/a&gt;
Let&#39;s us control the horizontal alignment of text.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform&quot;&gt;text-transform&lt;/a&gt;
Changes the case of text – whether it&#39;s uppercase, lowercase, or capitalized.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration&quot;&gt;text-decoration&lt;/a&gt;
Sets the line decoration of elements. We&#39;ll commonly use this property to remove underlines in links.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight&quot;&gt;font-weight&lt;/a&gt;
Sets how thick or thin the characters are displayed.&lt;/p&gt;

&lt;h3&gt;Font Properties&lt;/h3&gt;

&lt;p&gt;Like text properties, font properties let us change the appearance of text by assigning a font family, font size, font style, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cssfontstack.com/&quot;&gt;CSS Font stack generator for web safe fonts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/font-family&quot;&gt;font-family&lt;/a&gt;
Defines a typeface for our text.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;/* 如果你的电脑没有第一个字体，则显示第二个，第二个也没有就第三个这样。字体名字中有空格的要用&quot;&quot;围起来。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/font-style&quot;&gt;font-style&lt;/a&gt;
Allows italic or oblique faces to be selected within a font family.&lt;/p&gt;

&lt;h3&gt;Line Height&lt;/h3&gt;

&lt;p&gt;With the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/line-height&quot;&gt;line-height&lt;/a&gt; property, we can increase, or decrease, the vertical gaps between lines of text.&lt;/p&gt;

&lt;h3&gt;Font&lt;/h3&gt;

&lt;p&gt;A shorthand property that lets us write all the font properties in one value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body {
  font: normal 1em/1.5 &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 12 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/12/4%E6%9C%8812%E5%8F%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/12/4%E6%9C%8812%E5%8F%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6.html</guid>
        
        
      </item>
    
      <item>
        <title>4月11号这该死的学习之路！</title>
        <description>&lt;h3&gt;一些想说的&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;To love, like never been hurt.去爱吧，如同从未受过伤害。&lt;br/&gt;
To dance, like no one appreciate.  跳舞吧，就似没有人注视一般。&lt;br/&gt;
To sing, like no one listen to.唱歌吧，就像无人聆听那样。&lt;br/&gt;
To work, like no need of money.工作吧，以无需金钱为前提。&lt;br/&gt;
To life, like today is the end.享受生活吧，因为今天就是末日。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;在别处看到了这英文，以自己拙劣的水平翻译了下。看起来人生在世还是需要一些自我陶醉的，追求还是要有的，万一实现了呢？于是这几天对于学习很想说这一句话：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;To study, like tomorrow is the deadline.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;有效学习方法的一些想法&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;对于学习来说，清晰的目的和系统时非常重要的，首先要有一个明确的目标，进行系统性学习。而系统学习才能避免思维单一和思维僵化的风险。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;关于对编程的学习，我觉得最有效的方法是任务驱动，不得不去完成，学会并使用。使用完以后对新用法回顾，以形成清晰地图，继续拓展新的学习。循环往复下去后，就可以持续进步。某种程度上来说，不单单是编程是这样的，大多数知识和能力都可以这样学习和锻炼。&lt;/p&gt;

&lt;p&gt;而在学习的过程中，我认为把许多看似一大块的内容拆解为基本元素来学习会更有效率。这有点像搭积木，要先有基本的几块积木，然后利用所有学到的规则，把积木搭成任意想要的形状。怎么区分基本元素很重要，因为积木可以有不同的粒度层次。举例来说，在英语学习中，字母是积木，单词是积木，常用词组可以是积木，语法规则也可以是积木。所以说，在学习目标与阶段不一样时，相对应的积木会不一样，比如说学发音规则时，音素时最小单位，是这个时期的积木；学习词组时，单词是积木；而学习句法时短语就是对应的积木。&lt;/p&gt;

&lt;p&gt;而对于学习专注度的关键词，我认为主要有&lt;strong&gt;兴趣-&gt;练习-&gt;正反馈-&gt;达到心流状态-&gt;良性循环&lt;/strong&gt;。心流，英文名Flow，也可以叫“&lt;em&gt;神驰&lt;/em&gt;”，定义是一种将个人精神力完全投注在某种活动上的感觉；心流产生时同时会有高度的兴奋及充实感。关于心流，因本人才疏学浅，在这里也就不讨论。如何提高学习专注度，对于这点，我个人首先在这里要说一下本人在学习时是极其容易分心的。但是最近我在尝试专注学习中发现了，有以下几个事情，能让我的专注度显著提高：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;但在我想学习的这个时间段前，各种社交媒体上的信息都要处理完毕。例如微信和qq上确保了没有和人聊天，群信息也已经看完。不一定需要把手机网络屏蔽，要确保我学习的时间段，是大家都不会找我的时间。&lt;/li&gt;
&lt;li&gt;番茄钟是一个给人有开始学习后能有休息这个最大盼头的有效办法。至于每个人番茄钟的长短是看个人习惯而定，一开始可能只能有15分钟的高度专注时间，就需要5分钟来分心休息。但要有计划地拉长番茄钟，个人认为30分钟，休息5分钟是个不错的番茄钟选择。&lt;/li&gt;
&lt;li&gt;就像我刚刚说的学习专注度关键词，要找到自己真正感兴趣的任务来驱动自己。事先准备号相对应的简单练习，在完成练习后会有对应的成就感，这能促进正反馈流程以达到良性循环。&lt;/li&gt;
&lt;li&gt;人要有精神，劳累的状态是不能学习的。早睡早起，吃好早餐能开启美好而拥有充沛精神的一天，这是一个长期熬夜党最近尝试改变之后一个血的教训。相比大多数人也都知道这样做的好处，但能不难做到就是另外一回事了。&lt;/li&gt;
&lt;li&gt;首推个人独自学习，人一多环境就会乱，自己的学习专注力根本无法得到锻炼。有问题就要积累好在一个地方，例如本子或者网络。之后找到能人问清楚是必须的，不能积累得太久太多，不然之前的学习也是白费功夫。&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;平衡不同学习的一些想法&lt;/h3&gt;

&lt;p&gt;最近对学校学习有些许烦恼，于是思考了下，觉得如何找到学校专业学习与自身学习的平衡点也是非常重要的。毕竟自己知道什么重要而学，和为了学校要求而学还是挺不同的。马克吐温也吐槽过：&lt;em&gt;&quot;I never let school interfere with my education.&quot;&lt;/em&gt;关于学校教育自身不喜欢的问题，有个段子很好地解释了：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;不是因为用不上就不用好好学，而是不好好学你根本就用不上。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;特别是本专业的基础课，由于知识是进阶联系的，如果因为不喜欢而放弃某个基础课，那么以后的课程十有八九是难以学好的。除非你已经打定主意放弃这个专业，不然之后的学习都是空中楼阁，无法承受来自更高层次科目的要求。大多数学生其实还没有评判某个课程价值的专业能力，却因为自由的名义把自己给荒废。在这个方面，我个人认为我还真是个中翘楚，经验十足啊！对于这样一个问题，我觉得可以重新定义下要讨论的主题：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;不感兴趣又对未来重要的科目如何在最短时间内高效率学好&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这其实根本就是运筹学嘛，即怎么规划所有可能的精力(时间其实也是精力的一种)，使之在某一目的上达到最优解，或者我们可以说是解决有限资源的最优化问题。其实这和我个人存留很久的一个想法是非常不同的：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;不感兴趣又感觉没有什么意义的科目如何最快地应付好考试&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;说实话，只要是不感兴趣，对于我来说就已经很困难。巨大的挫败感会一直笼罩在心里头，导致了对于学习的厌恶。 或许找个合适点的方法或者强动机能让我啃出一点味道来就可以慢慢产生兴趣，但是我没兴趣的地方，拖延症是十分严重的！ 那么接下来就会变成与拖延症战斗的过程，一个问题没解决，另一个噁心的东西又出现了。简直是一环套一环，让你欲摆脱而不能。这似乎说明了一个道理，&lt;strong&gt;学好的前提是喜欢这个东西&lt;/strong&gt;。那为了解决前边所有的问题，我们只能把讨论的主题再次换掉：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;如何喜欢上不喜欢的课程或者说是你必须得学的东西&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我想了想，这大概是全世界师徒制度长久存在的一个原因。有一个高明睿智的师傅手把手带着你学，他能根据你个人和自身在这个行业里摸爬滚打多少年的经验制定出相对应最合适你的控制路径和个性化方法，让你快速上道。最重要的是，你必须得学，要不然他会打你屁屁，比较之下，确实学习就没那么痛苦了。但是，这样的存在只能是一个理想化的角色，毕竟千里马多，伯乐少啊！所以我们可以树立这样一个理想化的参照物，看看大师们都是怎么学习的，都和什么人物接触，会读什么书籍。在现代社会里，想找到这样的参照物简直易如反掌，微博、专业论坛、在线学习等待社交媒体减少了你与大师沟通的成本，更让你轻易地知道大师的成长之路。不像旧时代，只能等大师们写写自传，买他别的书来猜测他的成长之路；当然我并不是说写自传买书就不好，只是举个例子而已。&lt;/p&gt;

&lt;p&gt;我说的这些，都说明了自学者是多么的难以看清全局和把握自己所在的位置，更不用对于学习内在的自我驱动力了。所以该怎么能让自己喜欢上这必须得学的玩意呢？我想先说明下学习的三种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;兴趣学习式&lt;/li&gt;
&lt;li&gt;师徒培养式&lt;/li&gt;
&lt;li&gt;苦学式&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;大约一开始对于自己不喜欢的科目都是用第三种方式来学习吧。前边也讨论了，好师傅很难找，而且有句话说得好：&lt;strong&gt;人欲成大事，必先苦其心志, 劳其筋骨，饿其体肤&lt;/strong&gt;。现在不至于挨饿，但是苦逼是肯定的。不过对于我而言，一直苦学是根本专注不下来的。于是我想出了这样一个办法：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;学习感兴趣的时间多一点，相当于苦学的奖励&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在这里可以提出一个写时间日志的方法，当学习自己不感兴趣的东西时，比如花了一整天的学习精力的30%，那么感兴趣的就可以花50%精力去学习，这个度因人而异。在这里，怎么分配精力在不同的学习上又是一个很值得讨论的问题，但我个人觉得先去尝试下不同学习的奖励制度才是先要关心的。也就是说，先做起来，而不是一直想着我该怎么分配精力，用一段日子地实践来慢慢调整出最适合自己的才是正确的做法。这似乎很符合我现在在学习的无监督机器学习的课程的想法呢，不需要人工预先准备好的例子，自己多跑几次就能数据聚类。&lt;/p&gt;

&lt;p&gt;于是乎，这算是目前我能想到的一点点解决之道，不知对于你们，又是怎么想的呢？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;简而言之，其实不管用什么方式去学习，它都是一件很苦的事。我今天的这点思考，肯定只是学习这条道路上的沧海一栗，活着就是要学习啊。要不活着可多没意思，让脑袋充沛起来吧朋友们！&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/11/4%E6%9C%8811%E5%8F%B7%E8%BF%99%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%81.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/11/4%E6%9C%8811%E5%8F%B7%E8%BF%99%E8%AF%A5%E6%AD%BB%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%81.html</guid>
        
        
      </item>
    
      <item>
        <title>4月10号周五的晚上没学习的日子</title>
        <description>&lt;p&gt;如果说今天到底学了什么，大约就是下午学联技术组开会时，关于网站的一些东西吧，称不上知识。因为使用的是wordpress主题，我们的网站基本上就不需要编码，但是需要学习一些基本的wordpress的操作。感觉是不难的，但是因为要加不少内容，应该还挺啰嗦的吧。&lt;/p&gt;

&lt;p&gt;还想吐槽的是，家里不知道是不是出现了&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E8%87%AD%E8%99%AB%E7%A7%91&quot;&gt;begbug(床虫)&lt;/a&gt;，搞的心里十分紧张。因为在洗澡时发现腿部上有很多小红点，但是却不痒，赶紧咨询前辈们。答案是99%是被咬了，但是我很奇怪的一点是它们怎么透过秋裤咬的我小腿中部外侧。但前辈还说可能也不一定是，因为不痒。但我突然想起一周前的今天，我背着我的睡袋到朋友家客厅地上睡了一晚上，想到曾经听说过床虫出没过在那片区域，心中不免大惊！却也大喜，如果我宿舍里没有，那就是不幸中的万幸！经过身为资深床虫受害者的前辈科普，我对床虫有了一定的认识：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;床虫生命力超强，吃一次可以继续饿半年。有人类的时候，就使劲吸，不跷班不打烊。&lt;/li&gt;
&lt;li&gt;被床虫咬后当晚，肯定会痒得十分难受，无法入睡。&lt;/li&gt;
&lt;li&gt;床虫咬的伤口，常常需要几个有甚至半年来完全消退，能持续两到四个星期，遇到热水会更痒。&lt;/li&gt;
&lt;li&gt;床虫会在人身上留下走过的痕迹，意味着下次还会按照相似的路线来到之前伤口附近继续咬你！所以伤口都十分集中。&lt;/li&gt;
&lt;li&gt;床虫甚至连你的屁股都咬，这位前辈好惨……&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;不管怎么样，还要持续关注，因为还不确定家里有没有，希望明早起来的时候，身上没有新的伤口。&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/10/4%E6%9C%8810%E5%8F%B7%E5%91%A8%E4%BA%94%E7%9A%84%E6%99%9A%E4%B8%8A%E6%B2%A1%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%97%A5%E5%AD%90.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/10/4%E6%9C%8810%E5%8F%B7%E5%91%A8%E4%BA%94%E7%9A%84%E6%99%9A%E4%B8%8A%E6%B2%A1%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%97%A5%E5%AD%90.html</guid>
        
        
      </item>
    
      <item>
        <title>4月9号clojure学习笔记</title>
        <description>&lt;h3&gt;&lt;strong&gt;Clojure作业笔记&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;似乎有点突然，这里笔记就转到了这个Clojure，但是没办法，是作业必须完成。为了学分苟活的学渣我也就修修这种课来赚学分了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://iloveponies.github.io/&quot;&gt;这里是资料，你也可以学，只是没学分。&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Clojure是什么玩意：&lt;/strong&gt;&lt;/h4&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Clojure&lt;/strong&gt; is a young Lispish functional programming language on the JVM platform, suitable for small and large programs. Because it runs on the JVM, all Clojure programs can use all the standard and third-party Java libraries freely.&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;user=&amp;gt; (+ 1 2)
3
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是一个标准的Clojure程序代码和输出，它是一种解释性语言。
在这门课的material里推荐使用&lt;a href=&quot;http://lighttable.com/&quot;&gt;light table&lt;/a&gt;作为编译器，大约也是因为可以很好的即时执行Clojure代码的缘故。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;一个Clojure的function实现&lt;/strong&gt;:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;(defn                                ; Start a function definition:
 hello                               ; name
 &quot;Gives out personalized greetings.&quot; ; a optional docstring
 [who]                               ; parameters inside brackets
 (str &quot;Hello, &quot; who &quot;!&quot;))            ; body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;；&lt;/strong&gt;这个符号在clojure里起到注释的作用。
让我们来看看在Java下实现同样的语句效果时的代码是怎么样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
* Gives out personalized greetings.
*/
String hello(String who) {
  return &quot;Hello, &quot; + who + &quot;!&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没错，你可以发现，在Clojure里没有return关键字。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note that in Clojure, there is no return keyword. The return value of a function is always the value of the last expression in the function body.&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;(defn sign [x]
  (if (&amp;lt; x 0)
  &quot;-&quot;
  &quot;+&quot;))

(sign  2) ;=&amp;gt; &quot;+&quot;
(sign -2) ;=&amp;gt; &quot;-&quot;
(sign  0) ;=&amp;gt; &quot;+&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上可以看出来如下说明：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In functional programming, and specifically in Clojure, everything is an expression. This is a way of saying that everything has a usable value.&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;(let [name1 value1
      name2 value2
      ...]
      (expression1)
      (expression2)
      ...)    

user=&amp;gt; (let [x 42]
         (+ x x))
         ;=&amp;gt; 84
user=&amp;gt; x
CompilerException java.lang.RuntimeException:Unable to resolve symbol: x in this context, compiling:(NO_SOURCE_PATH:0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当需要在一个function里声明一个function或者value时，可以使用let关键字。但是此时let声明出的变量或者函数不能在此函数外部使用，说明这是一个local name。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;What kind of values Clojure supports:&lt;/strong&gt;&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type        &lt;/th&gt;
&lt;th&gt; Examples   &lt;/th&gt;
&lt;th&gt; Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Numbers     &lt;/td&gt;
&lt;td&gt; 42, 3/2, 2.1&lt;/td&gt;
&lt;td&gt; Numbers include integers, fractions, and floats.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Strings     &lt;/td&gt;
&lt;td&gt; &quot;foo&quot;       &lt;/td&gt;
&lt;td&gt;Text values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Characters  &lt;/td&gt;
&lt;td&gt; \x, \y, \√    &lt;/td&gt;
&lt;td&gt;A single characer is written with a preceding \.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keywords    &lt;/td&gt;
&lt;td&gt; :foo, :?    &lt;/td&gt;
&lt;td&gt; Values often used as map keys.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Booleans    &lt;/td&gt;
&lt;td&gt; true, false &lt;/td&gt;
&lt;td&gt; Boolean values.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;&lt;br /&gt;
Clojure还支持混合的数据结构：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A &lt;strong&gt;vector&lt;/strong&gt; is a collection that can be indexed with integers, like an array in other languages. It can contain values of different types.&lt;/p&gt;&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[1 2 3]                 ;=&amp;gt; [1 2 3]
[:foo 42 &quot;bar&quot; (+ 2 3)] ;=&amp;gt; [:foo 42 &quot;bar&quot; 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;向量需要用符号[]来表示。不仅是空格，也可以用逗号来分割vector里的数据。以下是怎么获取向量里数据的几个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(get [&quot;a&quot; &quot;b&quot; &quot;c&quot;] 1)  ;=&amp;gt; &quot;b&quot;
(get [&quot;a&quot; &quot;b&quot; &quot;c&quot;] 15) ;=&amp;gt; nil
(get [&quot;x&quot;] 0)          ;=&amp;gt; &quot;x&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vectors are immutable即一个已经声明好的向量是不可改变的，但是可以随时利用它来创造新的向量，例如：(conj和assoc是一个函数)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(conj [1 2 3] 4)          ;=&amp;gt; [1 2 3 4]
(assoc [1 2 3 4] 2 &quot;foo&quot;) ;=&amp;gt; [1 2 &quot;foo&quot; 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Vectors: A Postmodern Deconstruction&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;这个我不知道怎么翻译好，似乎是一种提取向量里的值的方法，说是by destructuring，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(let [[x y z] [1 2 3 4 5 6]]
  (str x y z))
;=&amp;gt; &quot;123&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到x,y,z分别抽取出了向量里1，2，3的值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn sum-pairs [[x1 y1] [x2 y2]]
  [(+ x1 x2) (+ y1 y2)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到我们声明了一个函数，这两个向量的第一个值第二个值分别相加，造出了一个新的向量。我认为这就是一种破坏再生的过程，即destructuring的含义所在。后边的练习大概就是关于利用这个特性各种各样拆分向量来计算，答案如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn point [x y]
  [x y])

(defn rectangle [bottom-left top-right]
  [bottom-left top-right])

(defn width [rectangle]
  (let [[[x1 y1] [x2 y2]] rectangle]
    (- x2 x1)))

(defn height [rectangle]
  (let [[[x1 y1] [x2 y2]] rectangle]
    (- y2 y1)))

(defn square? [rectangle]
  (= (width rectangle) (height rectangle)))

(defn area [rectangle]
  (* (width rectangle) (height rectangle)))

(defn contains-point? [rectangle point]
  (let [[[x1 y1] [x2 y2]] rectangle
         [x y] point]
    (and (&amp;lt;= x1 x x2) (&amp;lt;= y1 y y2))))

(defn contains-rectangle? [outer inner]
  (let [[k1 k2] inner]
    (and (contains-point? outer k1) (contains-point? outer k2)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 今天就先这样吧，明天继续努力！&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/09/4%E6%9C%889%E5%8F%B7Clojure%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/09/4%E6%9C%889%E5%8F%B7Clojure%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>4月8号学习笔记与进度</title>
        <description>&lt;p&gt;昨天的日志里没有和主页统一风格，就只是一个单纯的HTML页面（如下图），一直在想是怎么回事。直到今天又一次看了jekyll的入门教程，发现了我没在文章文件开头写layout的变量格式。感觉一下解决了心病！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-7ce3191d7e689b06.png&quot; alt=&quot;一个普通的HTML页面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有一个问题就是因为昨天看着界面很丑，今天花了大量时间在寻找各种主题。最后却啥也没收获，只是迷乱了双眼，忘却了开启这个博客的本心是为了学习记录，而不是马上就美化它。不过幸好及时醒悟，学习了css basics下两个小节的内容，还有5个小节，每个小节花费的时间是不等的。比如这两个我大约花了2个多小时。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-f5598265d200db29.png&quot; alt=&quot;每个小节都有各自侧重点&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-9f2828e16c986010.png&quot; alt=&quot;小节里的内容例子&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至于笔记，我这个人说实话不太记笔记，以后得改改。因为突然这里感觉已经不是正常的笔记记录了，而是心情经验吐槽记录。最近有点忙，明天不知道能看多少。&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/08/4%E6%9C%888%E5%8F%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/08/4%E6%9C%888%E5%8F%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6.html</guid>
        
        
      </item>
    
      <item>
        <title>4月7号学习笔记与进度</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-b1a018edd97a75b4.png&quot; alt=&quot;我的小主页&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我的小主页&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本来想着既然要学习前端技术，最好的练习方式当然是马上能上线个网站是最好的了。但是毕竟水平还略差，于是乎折中选择了利用&lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;建立一个小博客(&lt;a href=&quot;http://jekyllcn.com/&quot;&gt;jekyll是个好东西&lt;/a&gt;)来记录自己学习的过程（&lt;a href=&quot;darktan.github.io&quot;&gt;点击这里可以进入我的博客&lt;/a&gt;）。说实话，这玩意还挺不容易，尤其是我的mac在安装jekyll过程中出现了一些问题，花了好几个小时都没解决。最后无奈地看着terminal里出现的大量bug提示信息中某一行说下载一个东西安装就好，试了试还真成功了！(因为之前也看到各种人回答说下载某某东西就好但是下载安装了还是没解决，所以本来对这提示信息不抱希望)&lt;/p&gt;

&lt;p&gt;简而言之，今天还真没什么笔记，今天动手实际弄出来了一个网站，就算是一个很大的进步吧，也算是一个优秀的进度（就是今天没有浪费时间，解决了很多问题，做出了实际东西的意思）。博客里的美化会慢慢好起来的，这需要看看jekyll的文档。&lt;/p&gt;

&lt;p&gt;不过得到的启示就是，不要觉得某件事难就不去做，当真的做起来并解决它的时候，即使花费了不少时间，收获还是很巨大的。&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/07/4%E6%9C%887%E5%8F%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/07/4%E6%9C%887%E5%8F%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8E%E8%BF%9B%E5%BA%A6.html</guid>
        
        
      </item>
    
      <item>
        <title>Html+css+javascript学习计划</title>
        <description>&lt;p&gt;鉴于日前加入了一个python学习小组，本人决定努力学习前端知识，以便成为群里的异类。我的异类之路，无人能挡！
2015年4月6日－4月12日(第一周)：
之前已经在teamtreehouse开始了相对应的课程，选择了前端web开发方向。所以说目前已经有了一些进度，如下图我已经完成第一个how to make a website课(大约有七八个小时的estimation study time)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/38706-dd1b4a70844cad80.png&quot; alt=&quot;美妙实惠的进度表&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这一周的目标就是接着完成下边的css basics课程，不多说。能持续学习下去就好。&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://darktan.github.io/2015/04/06/html+css+javascript%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92.html</link>
        <guid isPermaLink="true">http://darktan.github.io/2015/04/06/html+css+javascript%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92.html</guid>
        
        
      </item>
    
  </channel>
</rss>
